# -*- coding: utf-8 -*-
"""layer_guided_backprop

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12BIK-Ku-F1XdzBJz1t9W0JF0P10QCTEv
"""

import torch
from torch.nn import ReLU

from pytorch_cnn_visualizations.src.misc_functions import (get_example_params,
                            convert_to_grayscale,
                            save_gradient_images,
                            get_positive_negative_saliency)


class GuidedBackprop():
    """
       Produces gradients generated with guided back propagation from the given image
    """
    def __init__(self, model,is_3d, firstLayer= None,layer=None):
        self.model = model
        self.gradients = None
        self.forward_relu_outputs = []
        self.layer = layer
        self.output = None
        # Put model in evaluation mode
        self.model.eval()
        self.update_relus()
        self.hook_layers(is_3d, layer, firstLayer)

    def hook_layers(self, is_3d, layer,firstLayer= None):
        def hook_function(module, grad_in, grad_out):
            #grad_in = torch.mean(grad_in[0], dim = 0)
            self.gradients = grad_in[0]
            if len(self.gradients.shape) > 4 and self.gradients.shape[1] > 3:
                self.gradients = torch.mean(self.gradients, dim=1)
        def hook_function_forward(module, input, output):
            self.output = output
        # Register hook to the first layer
        if firstLayer is not None:
            first_layer = firstLayer
        else:
            if is_3d:
                first_layer = list(self.model.model._modules.items())[0][1][0]
            else:
                first_layer = list(self.model._modules.items())[0][1]
        first_layer.register_backward_hook(hook_function)
        layer.register_forward_hook(hook_function_forward)

    def update_relus(self):
        """
            Updates relu activation functions so that
                1- stores output in forward pass
                2- imputes zero for gradient values that are less than zero
        """
        def relu_backward_hook_function(module, grad_in, grad_out):
            """
            If there is a negative gradient, change it to zero
            """
            # Get last forward output
            corresponding_forward_output = self.forward_relu_outputs[-1]
            corresponding_forward_output[corresponding_forward_output > 0] = 1
            modified_grad_out = corresponding_forward_output * torch.clamp(grad_in[0], min=0.0)
            del self.forward_relu_outputs[-1]  # Remove last forward output
            return (modified_grad_out,)

        def relu_forward_hook_function(module, ten_in, ten_out):
            """
            Store results of forward pass
            """
            self.forward_relu_outputs.append(ten_out)

        # Loop through layers, hook up ReLUs
        for pos, module in self.model._modules.items():
            if isinstance(module, ReLU):
                module.register_backward_hook(relu_backward_hook_function)
                module.register_forward_hook(relu_forward_hook_function)

    def generate_gradients(self, input_image, target_class, cnn_layer, filter_pos):
        self.model.zero_grad()
        # Forward pass
        x = input_image

        op = self.model(x)
        conv_output = torch.sum(torch.abs(self.output[0, filter_pos]))
        # Backward pass
        conv_output.backward()
        return self.gradients.data.cpu().numpy()[0]


if __name__ == '__main__':
    cnn_layer = 5
    filter_pos = 5
    target_example = 1  # dog
    (original_image, prep_img, target_class, file_name_to_export, pretrained_model) =\
        get_example_params(target_example)

    # File export name
    file_name_to_export = (
        f'{file_name_to_export}_layer{cnn_layer}_filter{filter_pos}'
    )

    # Guided backprop
    GBP = GuidedBackprop(pretrained_model)
    # Get gradients
    guided_grads = GBP.generate_gradients(prep_img, target_class, cnn_layer, filter_pos)
    # Save colored gradients
    save_gradient_images(guided_grads, f'{file_name_to_export}_Guided_BP_color')
    # Convert to grayscale
    grayscale_guided_grads = convert_to_grayscale(guided_grads)
    # Save grayscale gradients
    save_gradient_images(
        grayscale_guided_grads, f'{file_name_to_export}_Guided_BP_gray'
    )

    # Positive and negative saliency maps
    pos_sal, neg_sal = get_positive_negative_saliency(guided_grads)
    save_gradient_images(pos_sal, f'{file_name_to_export}_pos_sal')
    save_gradient_images(neg_sal, f'{file_name_to_export}_neg_sal')
    print('Layer Guided backprop completed')